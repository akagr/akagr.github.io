<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[if I were a cyborg]]></title>
  <link href="http://akashagrawal.me/atom.xml" rel="self"/>
  <link href="http://akashagrawal.me/"/>
  <updated>2014-09-15T12:24:36+05:30</updated>
  <id>http://akashagrawal.me/</id>
  <author>
    <name><![CDATA[Akash  Agrawal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A New Addition to My Coding Practices]]></title>
    <link href="http://akashagrawal.me/blog/2014/09/15/a-new-addition-to-my-coding-practices/"/>
    <updated>2014-09-15T11:45:58+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/09/15/a-new-addition-to-my-coding-practices</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a long time since my last post. I have been doing things in between. Doing projects with node.js, trying to wrap my head around functional programming (haskell, to be particular) and stuff. This post is about one of those things which are not apparent outright and you just kinda realize how they have played some part in your work/life.</p>

<p>I like listening to music occasionally. Sometimes I <em>tried</em> to use it to drown out ambient noise while at work. Ok, maybe more frequently than sometimes. But mostly, it made things worse. The volume of noise increases, the noise itself increases and it was a total party. Not in a good way.</p>

<p>I, like countless other geeks, consume boatloads of articles and discussions each week. As such, I came across a thread at HN with guys discussing various genres of music they like to code to. And I was rather interested at how many of them were favoring classical music. The science was all there. Classical music had little to no voices, smooth, flowing notes and isn&rsquo;t aimed at assaulting your senses.</p>

<p>I thought I was a big fan of new age. Hip hop. Pop. Following are a few myths I busted myself. Note that this is my own perception and may not be in agreement with yours.</p>

<ul>
<li>Classical music is boring and slow: When I first listened to Mozart, I was blown away by knowledge that only 10 fingers were playing those notes that fast. I am not trying to belittle new-age, but I feel almost all classical artists had what One Direction will never have ;)</li>
<li>It makes you sleepy and that&rsquo;s not what you want at work: It actually helped me stay in the zone for longer. Any programmer would agree with me here. One <em>cannot</em> feel sleepy in the zone. Never. It&rsquo;s what I am doing that can bore me, not what I am listening to.</li>
</ul>


<p>I have gone classical. I enjoy Beethoven and Mozart. Vivaldi too, which is playing as I am writing this. And it has not slowed my rate of typing or making me to tear my mind away from voices and beats to focus. It&rsquo;s playing. I&rsquo;m writing. Bliss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Asynchronous Javascript]]></title>
    <link href="http://akashagrawal.me/blog/2014/05/21/how_to_write_asynchronous_javascript/"/>
    <updated>2014-05-21T14:48:45+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/05/21/how_to_write_asynchronous_javascript</id>
    <content type="html"><![CDATA[<p>There is a high chance that any article you read on javascript mentions something about asynchronous nature of the language. But what exactly makes the language async? Or, in other words, how can we write asynchronous code? If you have tried accepting methods as arguments to make it <strong>look</strong> async, you&rsquo;ll know it won&rsquo;t work. If you have not, let&rsquo;s quickly build an async-looking method and see how it rolls.</p>

<!--more-->


<p>I will go with the most naive implementation of fibonacci since a reasonably high number will be sufficient to lock our program and show if our code is running async.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fibonacci</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">num</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">num</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">my_async_method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="cm">/* Calculate the fibonacci number for the given argument */</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Call the given callback with the result */</span>
</span><span class='line'>  <span class="nx">callback</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">my_async_method</span><span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">res</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Marker 1: Fibonacci returned: &quot;</span> <span class="o">+</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Marker 2: This line prints when the above method completes&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we go ahead and run the above code, we&rsquo;ll notice a lag before the result and subsequently our markers are printed (otherwise pass a larger number). Another point of interest is that marker#2 had to wait for the execution of <code>my_async_method</code> to finish before it. Although our invocation of <code>my_async_method</code> looks async, it clearly isn&rsquo;t .</p>

<p>To make a method truly asynchronous, we have to involve native code to break free from the control flow of our code. That means lot of low level C or even Assembly language. But those are not the only options. We can also cover our code inside one of the inherently async methods javascript has on offer. Methods such as <code>setTimeout</code>, <code>setInterval</code> and <code>process.nextTick</code>(node) are some of the async methods. Any code written in these will always execute asynchronously. Period.</p>

<p>Let me give an idea of how we will make our own method to run asynchronously.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">my_async_method</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">num</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>  <span class="cm">/* See what I am doing here? */</span>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="cm">/* Calculate the fibonacci number for the given argument */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Call the given callback with the result */</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run the code with this version of method, the second marker is executed immediately. After that, when the fibonacci data is calculated and available, our callback is executed. Like a real asynchronous method, right?</p>

<p>This may not sound like a big deal. But I was regularly stumped when some methods behaved asynchronously when mine never did. If you ever wondered the same thing, maybe now you know the magic behind it. Just place your potential bottlenecks inside an asynchronous method and enjoy the real power of async javascript.</p>

<p>Sound of below if this post helped you or you want to suggest corrections/improvements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hitch-hiker's Guide to Rebasing]]></title>
    <link href="http://akashagrawal.me/blog/2014/03/24/hitch-hikers-guide-to-rebasing/"/>
    <updated>2014-03-24T18:33:00+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/03/24/hitch-hikers-guide-to-rebasing</id>
    <content type="html"><![CDATA[<p>Git rebase is one of those features which people tell you not to use. Understand this, it is one of the most powerful tool git has to offer. People fear it because it is one of those few tools capable of irreversibly(maybe) damaging your git history. But don&rsquo;t expect to be a git ninja without knowing how to do a conflict-ridden <code>git rebase -i</code>. I&rsquo;ll try to provide a scenario based approach to learning rebase. Here are a couple of conventions I&rsquo;ll follow in my git graphs.</p>

<!-- more -->


<ul>
<li><code>*</code> represent the commits which you don&rsquo;t want affected</li>
<li><code>x</code> represent the commits which you want to move over or which were affected by rebasing</li>
</ul>


<p>But first&hellip;</p>

<h2>What is rebasing</h2>

<p>Every git commit except the first one has at least one parent. Its base, if you will. i.e. each commit is based off another commit. When I say &lsquo;based off&rsquo;, I mean it borrows all the files from its parent except the ones that have been changed and creates objects representing new changes on top of that.</p>

<p>Rebasing, in simplest terms means changing the parent of a commit. That&rsquo;s the full definition of rebasing, although git allows you some utilities to make some other changes too.</p>

<p>Visually, rebasing means you can move actual commits between branches. Cherry-picking means rebasing just a single commit. Nothing fancy there. Rebasing is generally associated with moving over more than one commit.</p>

<p>Now back to business. Here are some use cases of rebasing.</p>

<h2>Rebasing a branch over another</h2>

<p>  We have something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>--*--*--*--*--* <span class="o">(</span>master<span class="o">)</span>
</span><span class='line'>   <span class="se">\</span>
</span><span class='line'>    x--x--x--x--x <span class="o">(</span>dev<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To rebase dev over master, we can run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git co dev
</span><span class='line'><span class="nv">$ </span>git rebase master
</span><span class='line'>
</span><span class='line'>    --*--*--*--*--* <span class="o">(</span>master<span class="o">)</span>
</span><span class='line'>                   <span class="se">\</span>
</span><span class='line'>                    x--x--x--x--x<span class="o">(</span>dev<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Rebasing only some commits from tip of a branch to another</h2>

<p>  We don&rsquo;t want to rebase full branch. Just some commits from its tip. For this we will need to create a temporary branch to save the new tip too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>--*--*--*--*--* <span class="o">(</span>master<span class="o">)</span>
</span><span class='line'>   <span class="se">\</span>
</span><span class='line'>    *--*--*--x--x <span class="o">(</span>dev<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will create a new branch on the new tip first.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git co -b temp &lt;commit_id&gt;
</span><span class='line'>
</span><span class='line'>  --*--*--*--*--* <span class="o">(</span>master<span class="o">)</span>
</span><span class='line'>       <span class="se">\</span>
</span><span class='line'>        *--*--* <span class="o">(</span>temp<span class="o">)</span>
</span><span class='line'>               <span class="se">\</span>
</span><span class='line'>                x--x <span class="o">(</span>dev<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can easily rebase the commits over as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rebase --onto master temp dev
</span><span class='line'>
</span><span class='line'>  --*--*--*--*--* <span class="o">(</span>master<span class="o">)</span>
</span><span class='line'>        <span class="se">\ </span>       <span class="se">\</span>
</span><span class='line'>         <span class="se">\ </span>       x--x <span class="o">(</span>dev<span class="o">)</span>
</span><span class='line'>          <span class="se">\</span>
</span><span class='line'>           *--*--* <span class="o">(</span>temp<span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Interactive rebasing</h2>

<p>This will take time and is a little dodgy to get right in the first try. I recommend a test repo for this one.</p>

<p>To do an interactive rebase, you just add a <code>-i</code> option to any rebase command we discussed. This will open up a text editor with some commits listed along with their hashes. These are the commits which will be affected by rebasing. The general format of a line is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;action&gt; &lt;<span class="nb">hash</span>&gt; &lt;commit_message&gt;
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that <code>pick</code> is applied by default to all the commits. This means that if you save and exit the file now, the rebase will be no different than what you have done without the -i flag. But we didn&rsquo;t go interactive for nothing. We get a wealth of actions which can help re-write git history anyway we see fit. Here&rsquo;s what they are supposed to do.</p>

<ul>
<li>p/pick: The commit will be rebased without any modifications. This is what you do if you don&rsquo;t do an interactive rebase.</li>
<li>r/reword: When the rebase operation will get to this commit, it will pause and prompt you for a new commit message.</li>
<li>e/edit: The rebase operation will pause before rebasing this commit. You can change files, amend them in this commit and do a <code>git rebase --continue</code> to resume rebasing.</li>
<li>s/squash: Git will pause rebasing before this commit and prompt you for a new commit message. Then it will merge (amend) this commit into the previous one.</li>
<li>f/fixup: This is just like &ldquo;squash&rdquo;, but discards this commit&rsquo;s log message. Git doesn&rsquo;t pause for this one. The commit is automatically merged into its parent.</li>
</ul>


<p>Know that if a commit is rebased, it will in reality create an entirely new commit. This means that you should not rebase commits which you have already pushed somewhere. If you do, it is still possible to synchronize your new history but other co-workers (if any) might not appreciate the extra work.</p>

<h2>Don&rsquo;t fret the conflicts!</h2>

<p>Always expect conflicts. It will save you from a nasty shock when you just want to do a rebase quickly and leave for weekend. However, if you know what you are doing, the conflicts are handled pretty systematically. If you even run into a conflict during rebase, git will tell you about the naughty files. Open them, correct them and save them. Then do a <code>git add &lt;conflicting_files&gt;</code>. Make sure you don&rsquo;t commit your changes. Then simply continue rebasing with <code>git rebase --continue</code>.</p>

<p>Even if go cold-feet and want to opt out from rebasing, you can do a <code>git rebase --abort</code> and git will give you back your history just as it was before you started.</p>

<h2>Recovering lost commits</h2>

<p>I already told you the rebase commits are actually entirely different commits and git will stop showing you your old ones. So you actually completed a rebase and now want to recover your previous commits. You are conflicted! But git is lenient. It will not actually delete those old commits until next cleaning cycle (once every few weeks maybe). You can search for your lost commits by running reflog.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git reflog
</span><span class='line'>
</span><span class='line'>2356552 HEAD@<span class="o">{</span>0<span class="o">}</span>: commit: New post: Git rebase <span class="o">(</span>incomplete<span class="o">)</span>
</span><span class='line'>2056160 HEAD@<span class="o">{</span>1<span class="o">}</span>: commit <span class="o">(</span>amend<span class="o">)</span>: New post: Lazy definitions in javascript
</span><span class='line'>1a2c1b5 HEAD@<span class="o">{</span>2<span class="o">}</span>: commit <span class="o">(</span>amend<span class="o">)</span>: New post: Lazy definitions in javascript
</span><span class='line'>5b6f6c6 HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: New post: Lazy definitions in javascript
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>The above is a reflog of this blog I pulled up just as I am writing this. Luckily, you can see how rebasing or amending a commit will give you a new one. You can also see the hash of old commit (5b6f6c6) here. Note the SHA-hash, check it out, make a branch on it. You won&rsquo;t lose it again.</p>

<p>There is almost always a way of recovering your stuff in git. That is if you don&rsquo;t have a habit of running <code>git gc</code> after every operation.</p>

<p>I hope I helped at least one of you with rebasing. I&rsquo;ll be delighted to add more scenarios to this post if you can suggest them.</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Definitions in Javascript]]></title>
    <link href="http://akashagrawal.me/blog/2014/03/24/lazy-definitions-in-javascript/"/>
    <updated>2014-03-24T15:21:53+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/03/24/lazy-definitions-in-javascript</id>
    <content type="html"><![CDATA[<p>Ifs and elses make me cringe. I try to keep them away from my code since they generally result in lengthy and brittle code. But there are times when you simply don&rsquo;t have a choice. And you hate every moment of it. I learned a new pattern for defining functions lazily which I think is pretty cool. It cuts out these conditionals in a particular scenario and keeps me a little happier. Let&rsquo;s dig in.</p>

<!-- more -->


<h2>Use case</h2>

<p>This pattern can be applied when you know you&rsquo;ll need to execute a conditional only once and use it&rsquo;s result throughout. Example of this is if you are writing your own wrapper for ajax calls. IE, as always, requires a little something extra. So you may be lured into writing something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myajax</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="cm">/* Detect browser here with user agent or whatever */</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">browser</span> <span class="o">=</span> <span class="s1">&#39;some browser&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">browser</span> <span class="o">===</span> <span class="s1">&#39;ie&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="cm">/* Do it the way microsoft wants you to */</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="cm">/* Do it like the rest of this world. */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is nothing wrong with this code, if you are using it to teach beginners how to define functions. For production purposes, executing the conditional every time and knowing only one block is executing is always a pain. Sure, you can cache the result of browser and use that as a conditional so you don&rsquo;t have to calculate it again. But still, that conditional won&rsquo;t be leaving anytime soon. Fortunately, javascript doesn&rsquo;t go lightweight on you especially when functions are involved.</p>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myajax</span>  <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/* Detect browser here with user agent or whatever */</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">browser</span> <span class="o">=</span> <span class="s1">&#39;some browser&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">browser</span> <span class="o">===</span> <span class="s1">&#39;ie&#39;</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">result</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="cm">/* This way ie */</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Chrome, FF, what have you */</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that may look like more code than the previous snippet, but let&rsquo;s do a dry run. Based on the browser detected, <code>myajax</code> would contain code related to that browser only. Thereafter, there will be no conditionals for checking browser, no calculating browser from user agent, no nothing. Suddenly, our ajax wrapper loses all fat and starts eating less cpu cycles doing comparison it already should know an answer to.</p>

<p>I hope the code was easy to follow. It wasn&rsquo;t much anyways. Think you&rsquo;ll use it sometime soon?</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node Stack Setup for Sherlocks]]></title>
    <link href="http://akashagrawal.me/blog/2014/02/06/node-stack-setup-for-sherlocks/"/>
    <updated>2014-02-06T15:51:48+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/02/06/node-stack-setup-for-sherlocks</id>
    <content type="html"><![CDATA[<p>It is really commendable how things like <a href="http://yeoman.io/">Yeoman</a> can get you up and running with all the boilerplate written for you. That too with almost any combination of front-end, testing and node framework there is. However, make no mistake. If you are learning, better start raw. When I generated my first angularjs node app with yo, I was literally overwhelmed with all the stuff it wrote for me. I didn&rsquo;t understand half of it and deleted the directory promptly. I have been reading good things about various tools (grunt, express, mocha) from sidelines and suddenly, jumping into a couple of hundred line long Gruntfile being a noob was unnerving.</p>

<!-- more -->


<p>If you are like me and like to know how every bit of code in front of you works, let&rsquo;s create a boilerplate seed project ourselves. You really should feel the need to use something like yeoman and should know exactly what it gives you. I will be setting up a dev environment from scratch comprising of</p>

<ol>
<li>ExpressJs (Backend)</li>
<li>Angularjs (Front-end)</li>
<li>Mocha with Chai (Testing)</li>
<li>Grunt (Automation)</li>
</ol>


<p>First thing we need is to install node and npm. Google it. This bit is easily found. Then come back and we will start with our app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g express
</span><span class='line'>npm install -g grunt-cli
</span><span class='line'>npm install -g bower
</span></code></pre></td></tr></table></div></figure>


<p>We installed some node packages here. The <code>-g</code> flag means that they are global packages accessible throughout system. First is express. There are really loads of node frameworks including derby, sails etc. I found express to be most production-ready, least opinionated and most easy to setup. Then there is grunt. I&rsquo;ll leave that to a little later. Bower is to front-end what npm is to backend. Bootstrap? Foundation? jQuery? Well, bower takes care of them. I&rsquo;d have really loved if npm gave us those too. But those are the things we get right now so better suck it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>express myapp
</span><span class='line'><span class="nb">cd </span>myapp
</span></code></pre></td></tr></table></div></figure>


<p>This command basically creates a skeleton of your app and adds a couple of important files. First is <code>package.json</code>. You define all your app dependencies and other metadata. This is done so anyone with this file can install exactly the same versions of all dependencies and not be worried of incompatibilities. You&rsquo;ll find there are only a couple of dependencies here. First is express itself and other is jade. Jade is our html preprocessor which allows us to write cleaner markup without all those angle brackets. These files are converted to html when being served to browser.</p>

<p>Run <code>npm install</code> and it will install all the dependencies listed in <code>package.json</code>. You&rsquo;ll find that a new directory <code>node_modules</code> has sprouted up. This contains all the things installed by the command.</p>

<p>The <code>app.js</code> is fairly lengthy and is the starting point of your app. You configure settings, setup routes and create a server. To understand what each line does, I suggest you read the <a href="http://expressjs.com/api.html">api reference</a> which is surprisingly detailed yet short. Other than those, there is not much express really adds to your app. Just a couple of really small routes and views so that you can run <code>node app.js</code> and be happy. Well go ahead and run it.</p>

<p>Next we install a couple of front-end dependencies such as angularjs and foundation to start with. We will user bower for that. First we need a <code>bower.json</code> which, like <code>package.json</code> will keep a record of all things front-end for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>bower init
</span></code></pre></td></tr></table></div></figure>


<p>This will make you answer half a dozen questions and will spit back the final file. We will be editing the newly created <code>bower.json</code> to add some packages.</p>

<figure class='code'><figcaption><span>bower.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;myapp&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;authors&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;Akash Agrawal &lt;akagr@outlook.com&gt;&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;app.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;ignore&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;**/.*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;node_modules&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;bower_components&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;tests&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;angular&quot;</span> <span class="p">:</span> <span class="s2">&quot;~1.2.11&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;foundation&quot;</span> <span class="p">:</span> <span class="s2">&quot;~5.0.3&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We run a quick <code>bower install</code> and welcome a new <code>bower_components</code> directory to our app. Feel free to explore it.</p>

<p>If you have done some development, you can certainly name some tasks you&rsquo;d rather have oompa-loompas for. Like minifying your scripts and css, running tests everything you change something etc. Well grunt is the answer to all of these and since it can actually make your workflow go from bad to rad, I&rsquo;ll try to look at it in some depth. Let&rsquo;s install grunt locally to our project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install grunt --save
</span></code></pre></td></tr></table></div></figure>


<p>The <code>--save</code> option install the grunt and adds it to your package.json with correct version and everything. Sweet!</p>

<p>Grunt is, at its heart, a task runner. You tell it what to run, provide it some configuration options if applicable and it will see to it that the task is run. Go ahead and run <code>grunt</code> in terminal. It will complain that there is no Gruntfile. We need to make one. <code>touch Gruntfile.js</code> ought to do it. Run the grunt again. Now it will complain about not finding any tasks named &lsquo;default&rsquo;. Basically, we run the grunt like <code>grunt taskname</code>. If we omit taskname, it looks for a task named <code>default</code>. Let&rsquo;s hook up our Gruntfile. It has the following basic structure.</p>

<figure class='code'><figcaption><span>Gruntfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* A gruntfile has three impotant parts*/</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 1. Configuration: This part specifies the options </span>
</span><span class='line'><span class="cm">                       and configs for the tasks which </span>
</span><span class='line'><span class="cm">                       can be run by grunt. Plus it has&#39;</span>
</span><span class='line'><span class="cm">                       some grunt specific config too. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 2. Loading: We load tasks from other files and plugins</span>
</span><span class='line'><span class="cm">                 so that they are visible to grunt. Grunt does</span>
</span><span class='line'><span class="cm">                 not see your node_modules bu itself. If you</span>
</span><span class='line'><span class="cm">                 install a task package, you need to include it</span>
</span><span class='line'><span class="cm">                 here. Normally one line for each task package or file /*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  /* 3. Registration: You can register custom tasks here. For example:</span>
</span><span class='line'><span class="cm">                      `grunt develop` may run tests, start a server and</span>
</span><span class='line'><span class="cm">                      watch files for changes. You tell that combination here. */</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s fill out each part one by one. First we define some configuration options.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= jshint.files%&gt;&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Substitute the above in place of the comment of first part of Gruntfile. We added options for jshint and watch. Jshint will only act on the files we specify but we shouldn&rsquo;t need to run it everytime we modify these files. Therefore we added a watch which will monitor all the files specified by jshint task and run jshint whenever it notices any changes. Let&rsquo;s run <code>grunt watch</code> and see what happens. It didn&rsquo;t find the task watch. Remember , this part only contains the options to the tasks; not the actual tasks. We need to install those via npm and load them in our gruntfile.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install grunt-contrib-watch --save-dev
</span><span class='line'>npm install grunt-contrib-jshint --save-dev
</span></code></pre></td></tr></table></div></figure>


<p>That installed both the packages in <code>node_modules</code>. Notice the different <code>--save-dev</code> flag? It means package is a development dependency and not needed in production environment. We may choose not to install it on production server. Only add utility packages here on which your app&rsquo;s functionalilty does not depend. Now we reference both these packages from our Gruntfile. Substitute the second part of the comments with the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing fancy here. Run <code>grunt watch</code>. Bingo! The task started! Trying removing a semicolon from a line in your gruntfile and saving it. Then check back if the watch notices it. Here is the output of my terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>Running <span class="s2">&quot;watch&quot;</span> task
</span><span class='line'>Waiting...OK
</span><span class='line'>&gt;&gt; File <span class="s2">&quot;Gruntfile.js&quot;</span> changed.
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;jshint:files&quot;</span> <span class="o">(</span>jshint<span class="o">)</span> task
</span><span class='line'>Linting Gruntfile.js ...ERROR
</span><span class='line'><span class="o">[</span>L31:C2<span class="o">]</span> W033: Missing semicolon.
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>Warning: Task <span class="s2">&quot;jshint:files&quot;</span> failed. Use --force to <span class="k">continue</span>.
</span></code></pre></td></tr></table></div></figure>


<p>We are golden! The thing is set up correctly and killing it. The watch task is my most loved task. I can watch for anything and do anything. Kinda like demigod. Now lets quickly register a default task and make out Gruntfile complete. Use the following in place of the third placeholder comment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, kill the grunt if it is running and invoke it using just <code>grunt</code>. See what I mean. You can define loads of cool combinations like <code>'production', ['jshint', 'mochatest', 'uglify', 'concat']</code> and reap the benefits of automation.</p>

<p>Since we haven&rsquo;t written any application code yet, it would be a good time to set up testing and automate it with our newfound knowledge. I really liked mocha as testing framework. So here goes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install grunt-mocha --save-dev
</span><span class='line'>npm install grunt-mocha-test --save-dev
</span><span class='line'>npm install chai --save-dev
</span></code></pre></td></tr></table></div></figure>


<p>We need a sample test to make sure things are working. Create a directory <code>test</code> and add a new file <code>sample.test.js</code>. Use the following code for starters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chai&#39;</span><span class="p">).</span><span class="nx">expect</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Testing sample&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should run successfully&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now back to our Gruntfile. We need to specify some options, load the plugins and add a watch over them. Here is what my Gruntfile looks after this.</p>

<figure class='code'><figcaption><span>Gruntfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">jshint</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Gruntfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;app.js&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mochaTest</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">test</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">reporter</span><span class="o">:</span> <span class="s1">&#39;spec&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">src</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;tests/**/*.js&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">watch</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;&lt;%= jshint.files%&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;tests/**/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">tasks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;jshint&#39;</span><span class="p">,</span> <span class="s1">&#39;mochaTest&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-jshint&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-contrib-watch&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-mocha-test&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can either run the tests through <code>grunt mochaTest</code> or begin <code>grunt</code> and watch them execute on any changes. Both are handy to have.</p>

<p>So that&rsquo;s that. I hope the post was of some value and actually lit some bulbs in your head as to what goes where. Pimp out your Gruntfile some more, write some failing tests and make them pass. You know the way from here. Sound off below if something&rsquo;s amiss. Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infinite Scroller in AngularJs]]></title>
    <link href="http://akashagrawal.me/blog/2014/01/31/infinite-scroller-in-angularjs/"/>
    <updated>2014-01-31T10:52:03+05:30</updated>
    <id>http://akashagrawal.me/blog/2014/01/31/infinite-scroller-in-angularjs</id>
    <content type="html"><![CDATA[<p>Pagination is necessary. You can&rsquo;t slap 10k records in front of a user. And it is stupid to send that much data across. Even more stupid to expect that user will stick around while your data is received and rendered.</p>

<p>But infinite scrollers are like pagination hopped up on botox. They look beautiful, feel fresh and don&rsquo;t make users wait for silly page loads. What&rsquo;s more? They are generally much easier to build. So lets build one such scroller in angularjs from scratch.</p>

<!--more-->


<p>Here&rsquo;s a light bulb. If you don&rsquo;t know when to use directives, look out for places where you need to manipulate DOM from js. This includes adding event listeners, manipulating classes, css etc. These scream directive almost always. Since we will most definitely need to attach at least a scroll event listener to something, directive is what we are going to write.</p>

<p>Let&rsquo;s quickly create a dummy directive which attaches a scroll event to an element and make it alert every time we scroll it. Here is a quick fiddle to tinker with. Note that I have limited the height of scrollable element. Obviously, something needs to be scrollable. Be sure to put the directive on the element on which you are putting a scrollbar. It can be <code>&lt;body&gt;</code> itself. Just take care to get the controller right in that case.</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/akagr/Eu2FW/embedded/js,html,css,result/light/"></iframe>


<p>See how I have populated the list very crudely to get things going. The interesting points here are the <code>&lt;ul scroller&gt;</code> element in html and the directive in js. We have binded an event to the element.</p>

<p>But this list population is really bugging me. Moreover, I believe you&rsquo;ll want to load data on scroll instead of showing alert. So let&rsquo;s quickly refactor our controller and reference it from our directive.</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/akagr/Eu2FW/2/embedded/js,result,html,css/light/"></iframe>


<p>We have stashed away the logic to add more data inside a method which is called once from controller itself to load initial data. Every time we scroll, it adds more data. See the problem yet? We need to load data only when user hits the bottom. And we don&rsquo;t want to load data if user is scrolling up. Notice how scroll bar behavior changes as you scroll more. Try dragging scrollbar manually.</p>

<p>We need some logic to only load data if we have reached bottom. Lets see what we can do.</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/akagr/Eu2FW/4/embedded/result,js,html,css/light/"></iframe>


<p>Now that&rsquo;s more like it. I have marked the new bits with comments. We had some core js methods for DOM elements so we needed to extract it out of jquery wrapped element object. Next we put in a condition so that the <code>loadMore()</code> is called only when we are near bottom. Here&rsquo;s what each option means:</p>

<ul>
<li>scrollHeight: This is the total height of the element if it were not of limited height. Imagine all the <code>&lt;li&gt;</code> elements stacked without any hidden by overflow.</li>
<li>scrollTop: This is the amount of vertical pixels which we have scrolled. If you are at the top, it is 0.</li>
<li>offsetHeight: This is the height of the current frame visible to you. (Height of the yellow frame visible to us)</li>
</ul>


<p>  <img class="center" src="http://javascript.info/files/tutorial/browser/dom/elemScroll.png"></p>

<p>I have added a padding of 5 pixels to make it failsafe. I found sometimes even when I was at bottom, the sum of scrollTop and offsetHeight was lagging behind by a couple of pixels.</p>

<p>We have a fully functional infinite scrolling directive at this point. However it needs some refactoring. Right now, the directive is coupled with our controller too tight. For ex, it assumes that our controller must be having a <code>loadMore()</code> method. We can eliminate this by providing the loading method in html itself. Here&rsquo;s how. Look for additions and changes in comments.</p>

<iframe style="width: 100%; height: 300px" frameborder="0" seamless="seamless" src="http://jsfiddle.net/akagr/Eu2FW/6/embedded/result,js,html,css/light/"></iframe>


<p>By using isolate scope, we have fully decoupled our directive from controller. We can now use it without any changes across our apps. All we need is to specify the loading method in the html declaration. You can pimp out the <code>loadMore()</code> method by using some network calls and fetching stuff from database.</p>

<p>Thanks for sticking through. Hope you enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping My Head Around Prototypal Inheritance in Javascript]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/27/wrapping-my-head-around-prototypal-inheritance-in-javascript/"/>
    <updated>2013-12-27T16:28:40+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/27/wrapping-my-head-around-prototypal-inheritance-in-javascript</id>
    <content type="html"><![CDATA[<p>Javascript does not have the usual class-object model. I know some C++, some more Java and lots of Ruby. All of them follow classical object model which was kinda etched in my mind now. As such, the object model of javascript took a lot of time for me to wrap my stubborn head around.</p>

<p>So have I mastered it? Not at all. I have just started with serious js and need to practice. But I think I have a fairly good idea of how it works and what goes where. So here goes.</p>

<!--more-->


<h2>So what exactly prototypal means?</h2>

<p>Prototype is an object which acts as a base for other objects to inherit from. If that sounds confusing, consider an example. If we have a class named Animal, what will the Human be? If you think Human is also a class, what would your father be? An object? But you inherit from him too, right?</p>

<p>Object oriented programming was designed to mirror real-world. And there are no classes here. Everything is an object. We can say that two objects are similar, like two people. But this doesn&rsquo;t mean someone 3-d printed them according to a design called class. Those people came from other people, inheriting things, modifying and adding stuff on the way. See it?</p>

<blockquote><p>In real world, classes don&#8217;t spawn objects. Objects do.</p></blockquote>


<p>This outlook feels more natural to me now. And if you want to get the js object model, you need to come at it with an open mind. Don&rsquo;t try and find answers of prototypal model in the classical one and vice-versa.</p>

<h2>So how does it work in javascript?</h2>

<p>Let&rsquo;s see some code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Animal</span><span class="p">(</span><span class="nx">no_of_legs</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">legs</span> <span class="o">=</span> <span class="nx">no_of_legs</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">how_many_legs</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">legs</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">strange</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="nx">strange</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span> <span class="nx">legs</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">how_many_legs</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the break-up. Animal is an ordinary function. Don&rsquo;t mind the capital A. Call it what you want. Doesn&rsquo;t matter at all. So what&rsquo;s new? <code>new</code> is a keyword which creates a generic object <code>{}</code> and runs the given function on it. Nothing fancy. Let&rsquo;s write the last lines of the above examples somewhat differently to show you what I mean.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">strange</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1">// we create a generic object</span>
</span><span class='line'><span class="nx">Animal</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">strange</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// we run the function on it</span>
</span><span class='line'><span class="nx">strange</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span> <span class="nx">legs</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">how_many_legs</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span> <span class="c1">// Voila!</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how we mimicked the behavior of <code>new</code>? We now have a strange object with a couple of properties. We kinda initialized the object by giving it some pieces to own via <code>Animal()</code>. And we have a name for such kind of functions, do we not? We call them constructors. But don&rsquo;t let the name fool you. They really are ordinary functions.</p>

<p>We now know how we can create similar objects by using constructors. Let&rsquo;s create a couple more.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">normal</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="nx">wtf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>All these animals have common properties namely <code>legs</code> and <code>how_many_legs()</code>. We can definitely specialize these objects by assigning new un-related properties to each of them individually.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">strange</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;Strange&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">strange</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s1">&#39;Strange&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">normal</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="kc">undefined</span>
</span><span class='line'>
</span><span class='line'><span class="nx">wtf</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="kc">undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a problem with above code. Each new object has its own copy of <code>legs</code> which is necessary to differentiate their states. But they also have their own separate copies of <code>how_many_legs()</code> method. Method body remains same for all objects. So how do we share same method object between various animal objects?</p>

<h2>Prototypes</h2>

<p>Each function in js is potentially a constructor. Just write a silly one and use <code>new my_silly_method()</code> and it will create an object. If your method gives it some properties, fine, otherwise it will still create an empty <code>{}</code>. Similarly, each function also has a property called <code>prototype</code>. The contents of this property are shared by all the objects created through this function.</p>

<blockquote><p>Each function has a property called &#8216;prototype&#8217;. If the function is used as a constructor to create objects, then the contents of its &#8216;prototype&#8217; property will be shared by all those objects.</p></blockquote>


<p>This is probably the most important line of this post. Keep it clear in your head. Here&rsquo;s how we use prototypes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Animal</span><span class="p">(</span><span class="nx">no_of_legs</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">legs</span> <span class="o">=</span> <span class="nx">no_of_legs</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">how_many_legs</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">legs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">strange</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">strange</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span> <span class="nx">legs</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Animal</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span> <span class="nx">how_many_legs</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">strange</span><span class="p">.</span><span class="nx">how_many_legs</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">legs</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>See how the <code>how_many_legs()</code> function is no more a part of <code>strange</code>? Instead it resides in <code>Animal.prototype</code> and is thus callable from <code>strange</code>.</p>

<p>Experiment a bit with prototypes. If you got your brains around the above concept, you&rsquo;re are already almost there.</p>

<h2>Inheritance. Finally.</h2>

<p>So what do we need to implement inheritance. Only a couple of things actually.</p>

<ol>
<li>We need to share the properties of parent with child.</li>
<li>A child needs to be able to pass the baton to parent in case something does not exist with it. We will need a pointer of sorts for this.</li>
</ol>


<p>Here&rsquo;s how we get the first requirement, i.e. share Animal&rsquo;s properties with its children</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Human</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Human</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animal</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">i</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Human</span><span class="p">(</span><span class="s2">&quot;Akash&quot;</span><span class="p">,</span> <span class="mi">23</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now take a moment and think about what all things <code>i</code> will have access to. Here&rsquo;s what we have.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;Akash&quot;</span> <span class="c1">// as expected</span>
</span><span class='line'>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">age</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">23</span> <span class="c1">// also expected</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Human</span><span class="p">.</span><span class="nx">prototype</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span> <span class="nx">legs</span><span class="o">:</span> <span class="mi">2</span> <span class="p">}</span> <span class="c1">// new Animal(2)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// therefore</span>
</span><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">legs</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">2</span> <span class="c1">// see it?</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are still with me, you deserve a pat on back. This is the purest most undiluted method of implementing inheritance in javascript. There are other tricks too, but all of them have their roots here. We still have one last thing to see.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">i</span><span class="p">.</span><span class="nx">how_namy_legs</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how does this work? When interpreter does not find <code>how_many_legs()</code> in <code>i</code>, it looks it in its prototype. It founds that <code>i's</code> prototype is an Animal object which does have access to the said function. You can create a child object of Human and the chain will be continue the same way.</p>

<p>I hope now you have a better understanding of how the prototypal inheritance works in javascript. For perfection, world&rsquo;s your playground.</p>

<p>Thanks for reading. Sound off below if you think something&rsquo;s amiss or incorrect.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Vim From Source]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/24/building-vim-from-source/"/>
    <updated>2013-12-24T16:26:54+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/24/building-vim-from-source</id>
    <content type="html"><![CDATA[<p>Continuing my journey to vim enlightenment, I decided to build it from source. I can&rsquo;t call myself a linux guru and so jump at every chance to get to the metal. Anyways let&rsquo;s get started. The steps given here will install console vim with perl, python, ruby and tcl enabled. I did it on my Ubuntu precise but it should work for all things nix.</p>

<!--more-->


<p><code>build-dep</code> and <code>vim-gnome</code> are listed as dependencies for console vim. Better install those first. Also for things like ruby, python etc, you will have to install those too if you want to include their support.</p>

<p>I cloned the git repo of vim source from github</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/b4winckler/Vim
</span></code></pre></td></tr></table></div></figure>


<p>Next, I needed to see what all options vim had to offer during install. You can get those with <code>./configure --help</code>. Take your time exploring this. Here&rsquo;s how I set what options appealed to me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure <span class="se">\</span>
</span><span class='line'>--enable-perlinterp <span class="se">\</span>
</span><span class='line'>--enable-pythoninterp <span class="se">\</span>
</span><span class='line'>--enable-python3interp <span class="se">\</span>
</span><span class='line'>--enable-tclinterp <span class="se">\</span>
</span><span class='line'>--enable-rubyinterp <span class="se">\</span>
</span><span class='line'>--enable-multibyte <span class="se">\</span>
</span><span class='line'>--enable-fontset <span class="se">\</span>
</span><span class='line'>--enable-gui<span class="o">=</span>no <span class="se">\</span>
</span><span class='line'>--with-features<span class="o">=</span>huge <span class="se">\</span>
</span><span class='line'>--with-compiledby<span class="o">=</span><span class="s2">&quot;Akash Agrawal&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command creates some files in <code>src/auto</code> directory specifying install configuration. If you need to change or revise some options, or if you forgot to replace my name with yours, just delete the files in <code>src/auto</code> and configure again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Nothing special really. Just configure, make and install.
To check the fruits of your toil, use <code>vim --version</code> and it will show you all things it installed as well as your name sitting there looking rad.</p>

<p>I think I nailed it in my first try. It definitely is working well enough to be writing this post with markdown syntax highlighting enabled. Hoot below if something doesn&rsquo;t works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rudimentary Sessions for Vim]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/20/rudimentary-sessions-for-vim/"/>
    <updated>2013-12-20T10:26:52+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/20/rudimentary-sessions-for-vim</id>
    <content type="html"><![CDATA[<p>I have been taking a lot of vim with coffee lately. I really like the raw power of this editor. Up till now I have found replacement commands, mappings and plugins for most of my daily used features. Still, vim does not see projects and there is no automatic sessions support built-in.</p>

<p>The plugins on offer are excellent in their own right but they did not cut it for me. Plus, I really want to get into hacking editor part and it was a nice excuse to try out some of the vimscript I learnt.</p>

<!--more-->


<p>I started off a fork of casastorta&rsquo;s plugin of same name and got some autoloading in to avoid performance impact. I have also made the &lsquo;save session on exit default&rsquo;. The plugin once installed will try to save a session automatically in the current directory when you exit vim. Aaaannnnd, <strong>spoiler alert</strong>, it will also load the session when you fire up vim from same directory next time. It should fit right in if you plan to open vim from root of you projects.</p>

<p>Enough talk, lets see some code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">function</span><span class="p">!</span> sessions#create<span class="p">()</span>
</span><span class='line'>   <span class="k">let</span> <span class="nb">path</span> <span class="p">=</span> getcwd<span class="p">()</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">!</span>filewritable<span class="p">(</span><span class="s1">&#39;./.session.vim&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> tolower<span class="p">(</span>input<span class="p">(</span><span class="s2">&quot;No session file in &quot;</span> . <span class="nb">path</span> . <span class="s2">&quot;. Create one? [Y]es/[N]o &quot;</span><span class="p">))</span> <span class="p">=~</span> <span class="s2">&quot;y&quot;</span>
</span><span class='line'>         <span class="k">mksession</span><span class="p">!</span> ./.session.<span class="k">vim</span>
</span><span class='line'>      <span class="k">endif</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>      <span class="k">if</span> tolower<span class="p">(</span>input<span class="p">(</span><span class="s2">&quot;Session file &quot;</span> . <span class="nb">path</span> . <span class="s2">&quot;/.seesion.vim already exists. Overwrite? [Y]es/[N]o? &quot;</span><span class="p">))</span> <span class="p">=~</span> <span class="s2">&quot;y&quot;</span>
</span><span class='line'>         <span class="k">let</span> <span class="k">s</span>:sessionautoloaded <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>         <span class="k">call</span> sessions#<span class="k">save</span><span class="p">()</span>
</span><span class='line'>      <span class="k">endif</span>
</span><span class='line'>   <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> sessions#<span class="k">save</span><span class="p">()</span>
</span><span class='line'>   <span class="k">if</span> <span class="k">s</span>:sessionautoloaded <span class="p">==</span> <span class="m">1</span>
</span><span class='line'>      <span class="k">mksession</span><span class="p">!</span> ./.session.<span class="k">vim</span>
</span><span class='line'>      <span class="k">echom</span> <span class="s2">&quot;Session saved.&quot;</span>
</span><span class='line'><span class="c">      &quot;source ./.session.vim</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'>      <span class="k">echom</span> <span class="s2">&quot;No session to save. Please create session with &#39;:mksession .session.vim&#39; first! &quot;</span>
</span><span class='line'>      <span class="k">if</span> tolower<span class="p">(</span>input<span class="p">(</span><span class="s2">&quot;Autocreate session for you? [Y]es/[N]o &quot;</span><span class="p">))</span> <span class="p">=~</span> <span class="s2">&quot;y&quot;</span>
</span><span class='line'>         <span class="k">call</span> sessions#create<span class="p">()</span>
</span><span class='line'>      <span class="k">endif</span>
</span><span class='line'>   <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span><span class="p">!</span> sessions#<span class="k">load</span><span class="p">()</span>
</span><span class='line'><span class="c">   &quot; Rudimentary session management</span>
</span><span class='line'>   <span class="k">if</span> <span class="k">version</span> <span class="p">&gt;=</span> <span class="m">700</span>
</span><span class='line'>      <span class="k">set</span> <span class="nb">sessionoptions</span><span class="p">=</span>blank<span class="p">,</span><span class="k">buffers</span><span class="p">,</span>sesdir<span class="p">,</span>tabpages<span class="p">,</span><span class="k">winpos</span><span class="p">,</span>folds<span class="p">,</span><span class="k">options</span><span class="p">,</span>unix<span class="p">,</span>slash
</span><span class='line'>   <span class="k">endif</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="p">!</span>exists<span class="p">(</span><span class="s2">&quot;s:sessionautoloaded&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">let</span> <span class="k">s</span>:sessionautoloaded <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>   <span class="k">endif</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> filereadable<span class="p">(</span><span class="s1">&#39;./.session.vim&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="k">s</span>:sessionautoloaded <span class="p">==</span> <span class="m">0</span>
</span><span class='line'>         source ./.session.<span class="k">vim</span>
</span><span class='line'>         <span class="k">let</span> <span class="k">s</span>:sessionautoloaded <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>         <span class="k">echom</span> <span class="s2">&quot;Session loaded.&quot;</span>
</span><span class='line'>      <span class="k">endif</span>
</span><span class='line'>   <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have any interest in scripting vim, above is a fairly easy noob code. The snippet from my base plugin is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">if</span> exists<span class="p">(</span><span class="s1">&#39;b:loaded_rudimentary_sessions_ftplugin&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">finish</span>
</span><span class='line'><span class="k">endif</span>
</span><span class='line'><span class="k">let</span> <span class="k">b</span>:loaded_rudimentary_sessions_ftplugin <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Session is saved with &lt;leader&gt;ss (&lt;leader&gt; is \ by default)</span>
</span><span class='line'>nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="nb">ss</span> :<span class="k">call</span> sessions#<span class="k">save</span><span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="nb">sc</span> :<span class="k">call</span> sessions#create<span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">sl</span> :<span class="k">call</span> sessions#<span class="k">load</span><span class="p">()&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>augroup RudimentarySession
</span><span class='line'>  autocmd <span class="nb">VimEnter</span> * <span class="k">call</span> sessions#<span class="k">load</span><span class="p">()</span>
</span><span class='line'>  autocmd <span class="nb">VimLeave</span> * <span class="k">call</span> sessions#<span class="k">save</span><span class="p">()</span>
</span><span class='line'>augroup END
</span></code></pre></td></tr></table></div></figure>


<p>Before you think of installing this plugin, you might want to know a few issues that I noticed. First, if a session file exists in the directory, vim will always load it. Always. Even if you specify a file explicitly while opening vim. The file will be opened, sure, but in a hidden buffer. You will have to navigate to that file on your own.</p>

<p>Second, it might get a little confusing when every directory can potentially house a vim session file. It will get unpredictable what you will see on entering vim from a particular directory. It will be good to have some sort of organization to these session files.</p>

<p>If you want to give it a go, use your favorite vim bundle manager to install it from <a href="https://github.com/akagr/vim-rudimentary-sessions">my git repo here</a>.</p>

<p>If you have any suggestions or issues, take it to the github issue tracker. It ain&rsquo;t there for nothing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Vimrc]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/17/my-vimrc/"/>
    <updated>2013-12-17T12:46:00+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/17/my-vimrc</id>
    <content type="html"><![CDATA[<p>I love using sublime text. But there is something about vim that just keeps me pulling back. It&rsquo;s not my default editor of choice (yet) but I still enjoy writing stuff with it when I am not working. This blog is a fine example. Following is my vim config file. Some settings are there thanks to authors of some excellent blogs. Others, I have written myself out of my own needs. One thing&rsquo;s for sure, when it comes to customizability, vim is the grand-daddy of them all.</p>

<!--more-->




<div><script src='https://gist.github.com/8001153.js'></script>
<noscript><pre><code>&quot; Akash Agrawal akashagrawal.me
set nocompatible
set encoding=utf-8

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; vundle config
&quot; git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
&quot; add this to bashrc or bash_profile: export TERM=&quot;screen-256color&quot;
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Vundles
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
Bundle 'gmarik/vundle'

Bundle 'altercation/vim-colors-solarized'
Bundle 'Raimondi/delimitMate'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'Valloric/YouCompleteMe'
Bundle 'akagr/vim-rudimentary-sessions'
Bundle 'vim-scripts/scratch.vim'
Bundle 'godlygeek/tabular'
Bundle 'mileszs/ack.vim'

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; General
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
set nobackup nowritebackup noswapfile hidden
filetype plugin indent on
set winheight=30
set laststatus=2
set ttyfast
set lazyredraw

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Interface
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Syntax Highlighting
set background=dark
colorscheme solarized
syntax on

set wildmenu wildmode=longest:full,full
set ruler
set number
set relativenumber

&quot; Indentation
set expandtab tabstop=2 shiftwidth=2 
set smartindent autoindent copyindent

&quot; Search
set ignorecase smartcase
set hlsearch incsearch showmatch

set magic

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Functions
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
function! ToggleVExplorer()
  if exists(&quot;t:expl_buf_num&quot;)
    let expl_win_num = bufwinnr(t:expl_buf_num)
    if expl_win_num != -1
      let cur_win_nr = winnr()
      exec expl_win_num . 'wincmd w'
      close
      exec cur_win_nr . 'wincmd w'
      unlet t:expl_buf_num
    else
      unlet t:expl_buf_num
    endif
  else
    exec '1wincmd w'
    Vexplore
    let t:expl_buf_num = bufnr(&quot;%&quot;)
  endif
endfunction

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Variables 
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let mapleader = &quot;,&quot;
let g:mapleader = &quot;,&quot;

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='&lt;C-n&gt;'
let g:multi_cursor_quit_key='&lt;Esc&gt;'

let g:ctrlp_map = '&lt;c-p&gt;'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

map &lt;silent&gt; &lt;C-E&gt; :call ToggleVExplorer()&lt;CR&gt;

&quot; Hit enter in the file browser to open the selected
&quot; file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4
let g:netrw_altv = 1

&quot; Default to tree mode
let g:netrw_liststyle=3

&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; Key Bindings
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;

noremap &lt;silent&gt; &lt;C-E&gt; :call ToggleVExplorer()&lt;CR&gt;
noremap j gj
noremap k gk
inoremap jj &lt;ESC&gt;
nnoremap &lt;leader&gt;s :w&lt;cr&gt;
nnoremap &lt;leader&gt;w :bd&lt;cr&gt;
noremap &lt;space&gt; /
noremap &lt;silent&gt; &lt;leader&gt;, :noh&lt;cr&gt;

nnoremap &lt;c-b&gt; :CtrlPBuffer&lt;cr&gt;

nnoremap &lt;leader&gt;x :Scratch&lt;cr&gt;

nnoremap &lt;leader&gt;r :source ~/.vimrc&lt;cr&gt;

augroup myautocommands
  autocmd!
  autocmd FocusLost * :wa
augroup END
</code></pre></noscript></div>


<p>I know I really need some plug-ins. This file, like everybody else&rsquo;s, is a work in progress. Feel free to rip it off if you are starting out with vim. You can thank me by suggesting some great plug-ins or hacks which you dig in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally Gonna Date node.js]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/13/finally-gonna-date-node-dot-js/"/>
    <updated>2013-12-13T17:51:17+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/13/finally-gonna-date-node-dot-js</id>
    <content type="html"><![CDATA[<p>When I first heard of node.js, I was in graduation just getting into rails. But I seriously took notice when it displaced rails as the most popular repo on github. Speed whore as I am, I found event-driven non-blocking I/O particularly seducing.</p>

<p>I knew some elementary javascript and even at my work-ex of 7 months, never really used pure js. So I guessed, that just like ruby, I will definitely need to learn javascript a little. The world will be written in javascript in near future. Might as well start speaking it now.</p>

<!--more-->


<p>That said, my javascript is still quite rusty. But at least I now understand how to utilize functions as closures and decided to return to node. Being a web-dev, obviously I can&rsquo;t be playing with vanilla quite long. After saying hello to a couple of worlds and writing my own servers with some routes thrown in for taste, meteor caught my eye.</p>

<p>About the only downside I can think of it is is that it does not have eyes for anything other than MongoDb. So I can&rsquo;t just start writing code for my projects.</p>

<p>A nodejs project should be coming my way in sometime. I am hopeful of that. I will be spending as much time as I can manage with node till then. Should be an interesting journey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riak: Installation on Ubuntu 12.04]]></title>
    <link href="http://akashagrawal.me/blog/2013/12/11/riak-installation-on-ubuntu-12-dot-04/"/>
    <updated>2013-12-11T17:47:38+05:30</updated>
    <id>http://akashagrawal.me/blog/2013/12/11/riak-installation-on-ubuntu-12-dot-04</id>
    <content type="html"><![CDATA[<p>Riak is a relatively new kid on the block of NoSQL territory. It is based on principles of high availability, fault-tolerance, automatic replication and load balancing. Sounds like a deal for your next project&hellip; right? I got interested in one of my co-worker&rsquo;s project which is based on riak and decided to take it for a spin. Here is my first account with riak where I installed it on my Ubuntu 12.04 precise.</p>

<!--more-->


<p>First I needed to get all the prerequisites right. This involves some packages and erlang. Now I already got error with erlang OTP R14 so I decided to go with the latest R16 (B02 to be exact).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install git build-essential libncurses5-dev openssl <span class="se">\</span>
</span><span class='line'>libssl-dev libssl0.9.8 libc6-dev libc6-dev
</span></code></pre></td></tr></table></div></figure>


<p>Now download the latest erlang release from <a href="https://www.erlang-solutions.com/downloads/download-erlang-otp">here</a> and set it up as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dpkg -i &lt;your_downloaded_file.deb&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If that goes suuccessfully and without a fuss, chances are that you will have a fully functioning riak installation in a jiffy.
Next steps are fairly simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/basho/riak.git
</span><span class='line'><span class="nb">cd </span>riak
</span><span class='line'>make devrel
</span></code></pre></td></tr></table></div></figure>


<p>Successful completion of the above indicates you&rsquo;re good. Just in case, let&rsquo;s check our installation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>dev
</span><span class='line'>dev1/bin/riak start
</span><span class='line'>dev1/bin/riak ping
</span></code></pre></td></tr></table></div></figure>


<p>If the output goes pong, you are all set to get your explorer cap on.</p>

<p>In my case, there were lots of head-scratching due to incompatibilities between erlang, riak sources yada yada. Hopefully the process goes smoothly for you. Hoot off below if you are having problems</p>
]]></content>
  </entry>
  
</feed>
